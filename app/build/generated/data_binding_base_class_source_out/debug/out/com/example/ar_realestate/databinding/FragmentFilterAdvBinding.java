// Generated by view binder compiler. Do not edit!
package com.example.ar_realestate.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.ar_realestate.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentFilterAdvBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final Button FilterBtnApply;

  @NonNull
  public final EditText FilterBuildAgeMax;

  @NonNull
  public final EditText FilterBuildAgeMin;

  @NonNull
  public final EditText FilterBuildingFloorMax;

  @NonNull
  public final EditText FilterBuildingFloorMin;

  @NonNull
  public final EditText FilterDuesMax;

  @NonNull
  public final EditText FilterDuesMin;

  @NonNull
  public final EditText FilterEditTextAddress;

  @NonNull
  public final EditText FilterEditTextNumOfBath;

  @NonNull
  public final EditText FilterFloorLocMax;

  @NonNull
  public final EditText FilterFloorLocMin;

  @NonNull
  public final EditText FilterPriceMax;

  @NonNull
  public final EditText FilterPriceMin;

  @NonNull
  public final EditText FilterRentalMax;

  @NonNull
  public final EditText FilterRentalMin;

  @NonNull
  public final Spinner FilterSpinnerAdvStatus;

  @NonNull
  public final Spinner FilterSpinnerBuildType;

  @NonNull
  public final Spinner FilterSpinnerCity;

  @NonNull
  public final Spinner FilterSpinnerElgCredit;

  @NonNull
  public final Spinner FilterSpinnerFront;

  @NonNull
  public final Spinner FilterSpinnerFuelType;

  @NonNull
  public final Spinner FilterSpinnerItemStatus;

  @NonNull
  public final Spinner FilterSpinnerRoomNum;

  @NonNull
  public final Spinner FilterSpinnerStateBuilding;

  @NonNull
  public final Spinner FilterSpinnerSwap;

  @NonNull
  public final Spinner FilterSpinnerUsingStatus;

  @NonNull
  public final EditText FilterSquareMax;

  @NonNull
  public final EditText FilterSquareMin;

  @NonNull
  public final Spinner FilterWarmType;

  @NonNull
  public final TextView TextAddress;

  @NonNull
  public final TextView TextAdvFilter;

  @NonNull
  public final TextView TextAdvStatus;

  @NonNull
  public final TextView TextBuildAge;

  @NonNull
  public final TextView TextBuildType;

  @NonNull
  public final TextView TextBuildingFloors;

  @NonNull
  public final TextView TextCity;

  @NonNull
  public final TextView TextDues;

  @NonNull
  public final TextView TextElgForCredit;

  @NonNull
  public final TextView TextFloorLoc;

  @NonNull
  public final TextView TextFront;

  @NonNull
  public final TextView TextFuelType;

  @NonNull
  public final TextView TextItemStatus;

  @NonNull
  public final TextView TextNumOfBath;

  @NonNull
  public final TextView TextRentalIncome;

  @NonNull
  public final TextView TextRoomNum;

  @NonNull
  public final TextView TextSquareMeter;

  @NonNull
  public final TextView TextStateBuilding;

  @NonNull
  public final TextView TextSwap;

  @NonNull
  public final TextView TextUsingStatus;

  @NonNull
  public final TextView TextWarmType;

  @NonNull
  public final TextView textPrice;

  private FragmentFilterAdvBinding(@NonNull ScrollView rootView, @NonNull Button FilterBtnApply,
      @NonNull EditText FilterBuildAgeMax, @NonNull EditText FilterBuildAgeMin,
      @NonNull EditText FilterBuildingFloorMax, @NonNull EditText FilterBuildingFloorMin,
      @NonNull EditText FilterDuesMax, @NonNull EditText FilterDuesMin,
      @NonNull EditText FilterEditTextAddress, @NonNull EditText FilterEditTextNumOfBath,
      @NonNull EditText FilterFloorLocMax, @NonNull EditText FilterFloorLocMin,
      @NonNull EditText FilterPriceMax, @NonNull EditText FilterPriceMin,
      @NonNull EditText FilterRentalMax, @NonNull EditText FilterRentalMin,
      @NonNull Spinner FilterSpinnerAdvStatus, @NonNull Spinner FilterSpinnerBuildType,
      @NonNull Spinner FilterSpinnerCity, @NonNull Spinner FilterSpinnerElgCredit,
      @NonNull Spinner FilterSpinnerFront, @NonNull Spinner FilterSpinnerFuelType,
      @NonNull Spinner FilterSpinnerItemStatus, @NonNull Spinner FilterSpinnerRoomNum,
      @NonNull Spinner FilterSpinnerStateBuilding, @NonNull Spinner FilterSpinnerSwap,
      @NonNull Spinner FilterSpinnerUsingStatus, @NonNull EditText FilterSquareMax,
      @NonNull EditText FilterSquareMin, @NonNull Spinner FilterWarmType,
      @NonNull TextView TextAddress, @NonNull TextView TextAdvFilter,
      @NonNull TextView TextAdvStatus, @NonNull TextView TextBuildAge,
      @NonNull TextView TextBuildType, @NonNull TextView TextBuildingFloors,
      @NonNull TextView TextCity, @NonNull TextView TextDues, @NonNull TextView TextElgForCredit,
      @NonNull TextView TextFloorLoc, @NonNull TextView TextFront, @NonNull TextView TextFuelType,
      @NonNull TextView TextItemStatus, @NonNull TextView TextNumOfBath,
      @NonNull TextView TextRentalIncome, @NonNull TextView TextRoomNum,
      @NonNull TextView TextSquareMeter, @NonNull TextView TextStateBuilding,
      @NonNull TextView TextSwap, @NonNull TextView TextUsingStatus, @NonNull TextView TextWarmType,
      @NonNull TextView textPrice) {
    this.rootView = rootView;
    this.FilterBtnApply = FilterBtnApply;
    this.FilterBuildAgeMax = FilterBuildAgeMax;
    this.FilterBuildAgeMin = FilterBuildAgeMin;
    this.FilterBuildingFloorMax = FilterBuildingFloorMax;
    this.FilterBuildingFloorMin = FilterBuildingFloorMin;
    this.FilterDuesMax = FilterDuesMax;
    this.FilterDuesMin = FilterDuesMin;
    this.FilterEditTextAddress = FilterEditTextAddress;
    this.FilterEditTextNumOfBath = FilterEditTextNumOfBath;
    this.FilterFloorLocMax = FilterFloorLocMax;
    this.FilterFloorLocMin = FilterFloorLocMin;
    this.FilterPriceMax = FilterPriceMax;
    this.FilterPriceMin = FilterPriceMin;
    this.FilterRentalMax = FilterRentalMax;
    this.FilterRentalMin = FilterRentalMin;
    this.FilterSpinnerAdvStatus = FilterSpinnerAdvStatus;
    this.FilterSpinnerBuildType = FilterSpinnerBuildType;
    this.FilterSpinnerCity = FilterSpinnerCity;
    this.FilterSpinnerElgCredit = FilterSpinnerElgCredit;
    this.FilterSpinnerFront = FilterSpinnerFront;
    this.FilterSpinnerFuelType = FilterSpinnerFuelType;
    this.FilterSpinnerItemStatus = FilterSpinnerItemStatus;
    this.FilterSpinnerRoomNum = FilterSpinnerRoomNum;
    this.FilterSpinnerStateBuilding = FilterSpinnerStateBuilding;
    this.FilterSpinnerSwap = FilterSpinnerSwap;
    this.FilterSpinnerUsingStatus = FilterSpinnerUsingStatus;
    this.FilterSquareMax = FilterSquareMax;
    this.FilterSquareMin = FilterSquareMin;
    this.FilterWarmType = FilterWarmType;
    this.TextAddress = TextAddress;
    this.TextAdvFilter = TextAdvFilter;
    this.TextAdvStatus = TextAdvStatus;
    this.TextBuildAge = TextBuildAge;
    this.TextBuildType = TextBuildType;
    this.TextBuildingFloors = TextBuildingFloors;
    this.TextCity = TextCity;
    this.TextDues = TextDues;
    this.TextElgForCredit = TextElgForCredit;
    this.TextFloorLoc = TextFloorLoc;
    this.TextFront = TextFront;
    this.TextFuelType = TextFuelType;
    this.TextItemStatus = TextItemStatus;
    this.TextNumOfBath = TextNumOfBath;
    this.TextRentalIncome = TextRentalIncome;
    this.TextRoomNum = TextRoomNum;
    this.TextSquareMeter = TextSquareMeter;
    this.TextStateBuilding = TextStateBuilding;
    this.TextSwap = TextSwap;
    this.TextUsingStatus = TextUsingStatus;
    this.TextWarmType = TextWarmType;
    this.textPrice = textPrice;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentFilterAdvBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentFilterAdvBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_filter_adv, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentFilterAdvBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Filter_btnApply;
      Button FilterBtnApply = ViewBindings.findChildViewById(rootView, id);
      if (FilterBtnApply == null) {
        break missingId;
      }

      id = R.id.Filter_BuildAgeMax;
      EditText FilterBuildAgeMax = ViewBindings.findChildViewById(rootView, id);
      if (FilterBuildAgeMax == null) {
        break missingId;
      }

      id = R.id.Filter_BuildAgeMin;
      EditText FilterBuildAgeMin = ViewBindings.findChildViewById(rootView, id);
      if (FilterBuildAgeMin == null) {
        break missingId;
      }

      id = R.id.Filter_BuildingFloorMax;
      EditText FilterBuildingFloorMax = ViewBindings.findChildViewById(rootView, id);
      if (FilterBuildingFloorMax == null) {
        break missingId;
      }

      id = R.id.Filter_BuildingFloorMin;
      EditText FilterBuildingFloorMin = ViewBindings.findChildViewById(rootView, id);
      if (FilterBuildingFloorMin == null) {
        break missingId;
      }

      id = R.id.Filter_DuesMax;
      EditText FilterDuesMax = ViewBindings.findChildViewById(rootView, id);
      if (FilterDuesMax == null) {
        break missingId;
      }

      id = R.id.Filter_DuesMin;
      EditText FilterDuesMin = ViewBindings.findChildViewById(rootView, id);
      if (FilterDuesMin == null) {
        break missingId;
      }

      id = R.id.Filter_editTextAddress;
      EditText FilterEditTextAddress = ViewBindings.findChildViewById(rootView, id);
      if (FilterEditTextAddress == null) {
        break missingId;
      }

      id = R.id.Filter_editTextNumOfBath;
      EditText FilterEditTextNumOfBath = ViewBindings.findChildViewById(rootView, id);
      if (FilterEditTextNumOfBath == null) {
        break missingId;
      }

      id = R.id.Filter_FloorLocMax;
      EditText FilterFloorLocMax = ViewBindings.findChildViewById(rootView, id);
      if (FilterFloorLocMax == null) {
        break missingId;
      }

      id = R.id.Filter_FloorLocMin;
      EditText FilterFloorLocMin = ViewBindings.findChildViewById(rootView, id);
      if (FilterFloorLocMin == null) {
        break missingId;
      }

      id = R.id.Filter_PriceMax;
      EditText FilterPriceMax = ViewBindings.findChildViewById(rootView, id);
      if (FilterPriceMax == null) {
        break missingId;
      }

      id = R.id.Filter_PriceMin;
      EditText FilterPriceMin = ViewBindings.findChildViewById(rootView, id);
      if (FilterPriceMin == null) {
        break missingId;
      }

      id = R.id.Filter_RentalMax;
      EditText FilterRentalMax = ViewBindings.findChildViewById(rootView, id);
      if (FilterRentalMax == null) {
        break missingId;
      }

      id = R.id.Filter_RentalMin;
      EditText FilterRentalMin = ViewBindings.findChildViewById(rootView, id);
      if (FilterRentalMin == null) {
        break missingId;
      }

      id = R.id.Filter_spinnerAdvStatus;
      Spinner FilterSpinnerAdvStatus = ViewBindings.findChildViewById(rootView, id);
      if (FilterSpinnerAdvStatus == null) {
        break missingId;
      }

      id = R.id.Filter_spinnerBuildType;
      Spinner FilterSpinnerBuildType = ViewBindings.findChildViewById(rootView, id);
      if (FilterSpinnerBuildType == null) {
        break missingId;
      }

      id = R.id.Filter_spinnerCity;
      Spinner FilterSpinnerCity = ViewBindings.findChildViewById(rootView, id);
      if (FilterSpinnerCity == null) {
        break missingId;
      }

      id = R.id.Filter_spinnerElgCredit;
      Spinner FilterSpinnerElgCredit = ViewBindings.findChildViewById(rootView, id);
      if (FilterSpinnerElgCredit == null) {
        break missingId;
      }

      id = R.id.Filter_spinnerFront;
      Spinner FilterSpinnerFront = ViewBindings.findChildViewById(rootView, id);
      if (FilterSpinnerFront == null) {
        break missingId;
      }

      id = R.id.Filter_spinnerFuelType;
      Spinner FilterSpinnerFuelType = ViewBindings.findChildViewById(rootView, id);
      if (FilterSpinnerFuelType == null) {
        break missingId;
      }

      id = R.id.Filter_spinnerItemStatus;
      Spinner FilterSpinnerItemStatus = ViewBindings.findChildViewById(rootView, id);
      if (FilterSpinnerItemStatus == null) {
        break missingId;
      }

      id = R.id.Filter_spinnerRoomNum;
      Spinner FilterSpinnerRoomNum = ViewBindings.findChildViewById(rootView, id);
      if (FilterSpinnerRoomNum == null) {
        break missingId;
      }

      id = R.id.Filter_spinnerStateBuilding;
      Spinner FilterSpinnerStateBuilding = ViewBindings.findChildViewById(rootView, id);
      if (FilterSpinnerStateBuilding == null) {
        break missingId;
      }

      id = R.id.Filter_spinnerSwap;
      Spinner FilterSpinnerSwap = ViewBindings.findChildViewById(rootView, id);
      if (FilterSpinnerSwap == null) {
        break missingId;
      }

      id = R.id.Filter_spinnerUsingStatus;
      Spinner FilterSpinnerUsingStatus = ViewBindings.findChildViewById(rootView, id);
      if (FilterSpinnerUsingStatus == null) {
        break missingId;
      }

      id = R.id.Filter_SquareMax;
      EditText FilterSquareMax = ViewBindings.findChildViewById(rootView, id);
      if (FilterSquareMax == null) {
        break missingId;
      }

      id = R.id.Filter_SquareMin;
      EditText FilterSquareMin = ViewBindings.findChildViewById(rootView, id);
      if (FilterSquareMin == null) {
        break missingId;
      }

      id = R.id.Filter_WarmType;
      Spinner FilterWarmType = ViewBindings.findChildViewById(rootView, id);
      if (FilterWarmType == null) {
        break missingId;
      }

      id = R.id.TextAddress;
      TextView TextAddress = ViewBindings.findChildViewById(rootView, id);
      if (TextAddress == null) {
        break missingId;
      }

      id = R.id.TextAdvFilter;
      TextView TextAdvFilter = ViewBindings.findChildViewById(rootView, id);
      if (TextAdvFilter == null) {
        break missingId;
      }

      id = R.id.TextAdvStatus;
      TextView TextAdvStatus = ViewBindings.findChildViewById(rootView, id);
      if (TextAdvStatus == null) {
        break missingId;
      }

      id = R.id.TextBuildAge;
      TextView TextBuildAge = ViewBindings.findChildViewById(rootView, id);
      if (TextBuildAge == null) {
        break missingId;
      }

      id = R.id.TextBuildType;
      TextView TextBuildType = ViewBindings.findChildViewById(rootView, id);
      if (TextBuildType == null) {
        break missingId;
      }

      id = R.id.TextBuildingFloors;
      TextView TextBuildingFloors = ViewBindings.findChildViewById(rootView, id);
      if (TextBuildingFloors == null) {
        break missingId;
      }

      id = R.id.TextCity;
      TextView TextCity = ViewBindings.findChildViewById(rootView, id);
      if (TextCity == null) {
        break missingId;
      }

      id = R.id.TextDues;
      TextView TextDues = ViewBindings.findChildViewById(rootView, id);
      if (TextDues == null) {
        break missingId;
      }

      id = R.id.TextElgForCredit;
      TextView TextElgForCredit = ViewBindings.findChildViewById(rootView, id);
      if (TextElgForCredit == null) {
        break missingId;
      }

      id = R.id.TextFloorLoc;
      TextView TextFloorLoc = ViewBindings.findChildViewById(rootView, id);
      if (TextFloorLoc == null) {
        break missingId;
      }

      id = R.id.TextFront;
      TextView TextFront = ViewBindings.findChildViewById(rootView, id);
      if (TextFront == null) {
        break missingId;
      }

      id = R.id.TextFuelType;
      TextView TextFuelType = ViewBindings.findChildViewById(rootView, id);
      if (TextFuelType == null) {
        break missingId;
      }

      id = R.id.TextItemStatus;
      TextView TextItemStatus = ViewBindings.findChildViewById(rootView, id);
      if (TextItemStatus == null) {
        break missingId;
      }

      id = R.id.TextNumOfBath;
      TextView TextNumOfBath = ViewBindings.findChildViewById(rootView, id);
      if (TextNumOfBath == null) {
        break missingId;
      }

      id = R.id.TextRentalIncome;
      TextView TextRentalIncome = ViewBindings.findChildViewById(rootView, id);
      if (TextRentalIncome == null) {
        break missingId;
      }

      id = R.id.TextRoomNum;
      TextView TextRoomNum = ViewBindings.findChildViewById(rootView, id);
      if (TextRoomNum == null) {
        break missingId;
      }

      id = R.id.TextSquareMeter;
      TextView TextSquareMeter = ViewBindings.findChildViewById(rootView, id);
      if (TextSquareMeter == null) {
        break missingId;
      }

      id = R.id.TextStateBuilding;
      TextView TextStateBuilding = ViewBindings.findChildViewById(rootView, id);
      if (TextStateBuilding == null) {
        break missingId;
      }

      id = R.id.TextSwap;
      TextView TextSwap = ViewBindings.findChildViewById(rootView, id);
      if (TextSwap == null) {
        break missingId;
      }

      id = R.id.TextUsingStatus;
      TextView TextUsingStatus = ViewBindings.findChildViewById(rootView, id);
      if (TextUsingStatus == null) {
        break missingId;
      }

      id = R.id.TextWarmType;
      TextView TextWarmType = ViewBindings.findChildViewById(rootView, id);
      if (TextWarmType == null) {
        break missingId;
      }

      id = R.id.textPrice;
      TextView textPrice = ViewBindings.findChildViewById(rootView, id);
      if (textPrice == null) {
        break missingId;
      }

      return new FragmentFilterAdvBinding((ScrollView) rootView, FilterBtnApply, FilterBuildAgeMax,
          FilterBuildAgeMin, FilterBuildingFloorMax, FilterBuildingFloorMin, FilterDuesMax,
          FilterDuesMin, FilterEditTextAddress, FilterEditTextNumOfBath, FilterFloorLocMax,
          FilterFloorLocMin, FilterPriceMax, FilterPriceMin, FilterRentalMax, FilterRentalMin,
          FilterSpinnerAdvStatus, FilterSpinnerBuildType, FilterSpinnerCity, FilterSpinnerElgCredit,
          FilterSpinnerFront, FilterSpinnerFuelType, FilterSpinnerItemStatus, FilterSpinnerRoomNum,
          FilterSpinnerStateBuilding, FilterSpinnerSwap, FilterSpinnerUsingStatus, FilterSquareMax,
          FilterSquareMin, FilterWarmType, TextAddress, TextAdvFilter, TextAdvStatus, TextBuildAge,
          TextBuildType, TextBuildingFloors, TextCity, TextDues, TextElgForCredit, TextFloorLoc,
          TextFront, TextFuelType, TextItemStatus, TextNumOfBath, TextRentalIncome, TextRoomNum,
          TextSquareMeter, TextStateBuilding, TextSwap, TextUsingStatus, TextWarmType, textPrice);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
